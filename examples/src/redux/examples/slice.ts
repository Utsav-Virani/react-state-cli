import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { ExamplesState } from './types'

/**
 * Initial state for the examples slice
 */
const initialState: ExamplesState = {
  "products": [],
  "loading": false,
  "error": null,
  "selectedProductId": 0,
  "searchQuery": "",
  "currentPage": 1,
  "itemsPerPage": 10,
  "totalItems": 0,
  "filters": {
    "category": "",
    "priceRange": [
      0,
      1000
    ],
    "inStock": true,
    "sortBy": "name",
    "sortOrder": "asc"
  },
  "isFiltersOpen": false,
  "selectedView": "grid",
  "editingProduct": null,
  "isDirty": false,
  "categories": [
    "electronics",
    "clothing",
    "books"
  ],
  "recentlyViewed": [],
  "lastUpdated": null,
  "isInitialized": false,
  "debugMode": false
}

/**
 * Redux slice for examples state management
 * Auto-generated by react-state-cli
 */
const examplesSlice = createSlice({
  name: 'examples',
  initialState,
  reducers: {
    setProducts: (state, action: PayloadAction<any[]>) => { 
      state.products = action.payload 
    },
    setLoading: (state, action: PayloadAction<boolean>) => { 
      state.loading = action.payload 
    },
    setError: (state, action: PayloadAction<null>) => { 
      state.error = action.payload 
    },
    setSelectedProductId: (state, action: PayloadAction<number>) => { 
      state.selectedProductId = action.payload 
    },
    setSearchQuery: (state, action: PayloadAction<string>) => { 
      state.searchQuery = action.payload 
    },
    setCurrentPage: (state, action: PayloadAction<number>) => { 
      state.currentPage = action.payload 
    },
    setItemsPerPage: (state, action: PayloadAction<number>) => { 
      state.itemsPerPage = action.payload 
    },
    setTotalItems: (state, action: PayloadAction<number>) => { 
      state.totalItems = action.payload 
    },
    setFilters: (state, action: PayloadAction<Record<string, any>>) => { 
      state.filters = action.payload 
    },
    setIsFiltersOpen: (state, action: PayloadAction<boolean>) => { 
      state.isFiltersOpen = action.payload 
    },
    setSelectedView: (state, action: PayloadAction<string>) => { 
      state.selectedView = action.payload 
    },
    setEditingProduct: (state, action: PayloadAction<null>) => { 
      state.editingProduct = action.payload 
    },
    setIsDirty: (state, action: PayloadAction<boolean>) => { 
      state.isDirty = action.payload 
    },
    setCategories: (state, action: PayloadAction<string[]>) => { 
      state.categories = action.payload 
    },
    setRecentlyViewed: (state, action: PayloadAction<any[]>) => { 
      state.recentlyViewed = action.payload 
    },
    setLastUpdated: (state, action: PayloadAction<null>) => { 
      state.lastUpdated = action.payload 
    },
    setIsInitialized: (state, action: PayloadAction<boolean>) => { 
      state.isInitialized = action.payload 
    },
    setDebugMode: (state, action: PayloadAction<boolean>) => { 
      state.debugMode = action.payload 
    },
  }
})

export const { setProducts, setLoading, setError, setSelectedProductId, setSearchQuery, setCurrentPage, setItemsPerPage, setTotalItems, setFilters, setIsFiltersOpen, setSelectedView, setEditingProduct, setIsDirty, setCategories, setRecentlyViewed, setLastUpdated, setIsInitialized, setDebugMode } = examplesSlice.actions
export default examplesSlice.reducer
