name: Tag and Release

on:
  push:
    branches: [ master ]
    paths: [ 'package.json' ]

jobs:
  check-version-change:
    runs-on: ubuntu-latest
    
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check if version changed
      id: check
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        # Get previous version from package.json
        git checkout HEAD~1 -- package.json
        PREVIOUS_VERSION=$(node -p "require('./package.json').version")
        
        # Restore current package.json
        git checkout HEAD -- package.json
        
        echo "Current version: $CURRENT_VERSION"
        echo "Previous version: $PREVIOUS_VERSION"
        
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No version change detected"
        fi

  create-tag:
    runs-on: ubuntu-latest
    needs: check-version-change
    
    if: needs.check-version-change.outputs.version-changed == 'true'
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: |
        npm run lint
        npm run format:check
        npm run build
        npm run test:dry
    
    - name: Create and push tag
      run: |
        VERSION="${{ needs.check-version-change.outputs.new-version }}"
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Create annotated tag
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
        
        echo "Created and pushed tag v$VERSION" 